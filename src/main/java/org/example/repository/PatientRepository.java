package org.example.repository;

import org.example.model.Patient;
import org.example.model.enums.Gender;

import java.time.LocalDate;
import java.util.Comparator;
import java.util.List;

public class PatientRepository {
    private List<Patient> patients;

    public PatientRepository(List<Patient> patients) {
        this.patients = patients;
    }

    public List<Patient> listAllPatients(){
        return patients;
    }

    public List<Patient> listPatientsOlderThan30(){
        return patients.stream().filter(p -> p.getAge() > 30).toList();
    }

    public List<Patient> listPatientsOlderThanGivenAge(int age){
        return patients.stream().filter(p -> p.getAge() > age).toList();
    }

    public List<Patient> listPatientsFromGivenBirthPlace(String birthPlace){
        return patients.stream().filter(p -> p.getBirthPlace() == birthPlace).toList();
    }

    public List<Patient> listPatientsWhoHasWrongAgeGiven(){
        return patients.stream()
                .filter(p -> LocalDate.now().getYear() - p.getDateOfBirth().getYear() != p.getAge())
                .toList();
    }

    public List<Patient> listMalePatientsWithGivenBirthPlace(String birthPlace){
        return patients.stream()
                .filter(p -> p.getBirthPlace() == birthPlace
                        && p.getGender() == Gender.MALE).toList();
    }

    public List<Patient> listFemalePatientsWhereFirstNameAndLastNameStartsWithSameLetter(){
        return patients.stream()
                .filter(p -> p.getGender() == Gender.FEMALE
                        && p.getFirstName().charAt(0) == p.getLastName().charAt(0))
                .toList();
    }

    public List<Patient> listTopTenPatientsBasedOnPriorityScore(){
        //TODO: Priority score is generated by the formula: 0.9 * lowPriorityProblems + 1.1 * mediumPriorityProblems + 1.5 * highPriorityProblems
        return patients.stream().sorted(
                (p1, p2) -> {
                    var p1PriorityScore = 0.9 * p1.getNumberOfLowPriorityProblems()
                            + 1.1 * p1.getNumberOfMediumPriorityProblems()
                            + 1.5 * p1.getNumberOfHighPriorityProblems();
                    var p2PriorityScore = 0.9 * p2.getNumberOfLowPriorityProblems()
                            + 1.1 * p2.getNumberOfMediumPriorityProblems()
                            + 1.5 * p2.getNumberOfHighPriorityProblems();
                    return p1PriorityScore > p2PriorityScore ? 1 : -1;
                })
                .limit(10)
                .toList();
    }
}
